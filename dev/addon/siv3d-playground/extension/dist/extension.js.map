{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://siv3d-playground/./src/initialFiles.ts","webpack://siv3d-playground/external commonjs \"vscode\"","webpack://siv3d-playground/webpack/bootstrap","webpack://siv3d-playground/./src/extension.ts"],"sourcesContent":["import {\n    FileSystemError,\n\tFileSystemProvider,\n\tUri,\n\tworkspace,\n} from 'vscode';\n\nasync function readFileFromTemplate(workspaceRoot: Uri, extensionBase: Uri, sourcePath: string, targetPath?: string): Promise<void> {\n    const targetFilePath = Uri.joinPath(workspaceRoot, targetPath || sourcePath);\n\n    try {\n        await workspace.fs.stat(targetFilePath);\n    } catch (e) {\n        if (!(e instanceof FileSystemError)) {\n            throw e;\n        }\n\n        const fileContent = await workspace.fs.readFile(Uri.joinPath(extensionBase, \"template\", sourcePath));\n        await workspace.fs.writeFile(targetFilePath, fileContent);\n    }\n}\n\nasync function fetchFile(workspaceRoot: Uri, fetchBase: string, sourcePath: string, targetPath?: string): Promise<void> {\n    const targetFilePath = Uri.joinPath(workspaceRoot, targetPath || sourcePath);\n\n    try {\n        await workspace.fs.stat(targetFilePath);\n    } catch (e) {\n        if (!(e instanceof FileSystemError)) {\n            throw e;\n        }\n\n        const fileResponse = await fetch(Uri.joinPath(Uri.parse(fetchBase), sourcePath).toString());\n        const fileContent = await fileResponse.arrayBuffer();\n\n        await workspace.fs.writeFile(targetFilePath, new Uint8Array(fileContent));\n    }\n}\n\nexport async function loadInitialAssets(workspaceRoot: Uri, extensionBase: Uri) {\n    const promises: Promise<void>[] = [];\n\n    // await workspace.fs.createDirectory(workspaceRoot);\n    promises.push(readFileFromTemplate(workspaceRoot, extensionBase, \"README.md\"));\n    \n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"src\"));\n    promises.push(readFileFromTemplate(workspaceRoot, extensionBase, \"src/Main.cpp\"));\n\n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"include\"));\n\n    await Promise.allSettled(promises);\n}\n\nexport async function loadAdditionalAssets(workspaceRoot: Uri, extensionBase: Uri) {\n    const promises: Promise<void>[] = [];\n\n    const downloadUrl = workspace.getConfiguration(\"siv3d-playground\").get<string>(\"siv3d-assets-download-url\");\n\n    promises.push(readFileFromTemplate(workspaceRoot, extensionBase, \"main.html\"));\n\n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \".vscode\"));\n    promises.push(readFileFromTemplate(workspaceRoot, extensionBase, \".vscode/tasks.json\"));\n\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"lib/Siv3D.wasm\", \"Siv3D.wasm\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"lib/Siv3D.js\", \"Siv3D.js\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"lib/Siv3D.data\", \"Siv3D.data\"));\n\n    await Promise.allSettled(promises);\n\n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/windmill.png\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/particle.png\"));\n\n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/geojson\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/geojson/countries.geojson\"));\n\n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/texture\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/uv.png\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/grass.jpg\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/rock.jpg\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/ground.jpg\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/earth.jpg\"));\n\n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/shader\"));\n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/shader/essl\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/shader/essl/terrain_forward.vert\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/shader/essl/terrain_forward.frag\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/shader/essl/terrain_normal.frag\"));\n\n    await workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/obj\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/obj/blacksmith.obj\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/obj/mill.obj\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/obj/tree.obj\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/obj/pine.obj\"));\n        \n    await Promise.allSettled(promises);\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//\n// ############################################################################\n//\n//\t\t\t\t\t\t! USED FOR RUNNING VSCODE OUT OF SOURCES FOR WEB !\n//\t\t\t\t\t\t\t\t\t\t! DO NOT REMOVE !\n//\n// ############################################################################\n//\n\nimport * as vscode from 'vscode';\nimport { loadAdditionalAssets, loadInitialAssets } from './initialFiles';\nimport { ExtensionContext } from '../../wasm-playground/src/extension';\n\nexport async function activate(context: vscode.ExtensionContext) {\n\t\n\tif (!vscode.workspace.getConfiguration(\"siv3d-playground\").get<boolean>(\"enable-siv3d-preview\")) {\n\t\tvscode.window.showErrorMessage(\"Siv3D Preview is not available in this browser tab. Please use another browser tab.\");\n\t}\n\n\tlet compilePromiseResolver: ((resultCode: number) => void) | null;\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand(\"siv3d-playground.compile.run\", async () => {\n\t\t\tconst compilePromise = new Promise<number>((resolve, _) => {\n\t\t\t\tcompilePromiseResolver = resolve;\n\t\t\t});\n\t\t\tvscode.commands.executeCommand(\"workbench.action.tasks.runTask\", \"emcc build\");\n\n\t\t\tif ((await compilePromise) === 0) {\n\t\t\t\tconst workspaceRoot = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))\n\t\t\t\t\t? vscode.workspace.workspaceFolders[0].uri : undefined;\n\t\t\t\tvscode.commands.executeCommand(\"emcc.preview.show\", vscode.Uri.joinPath(workspaceRoot, \"main.html\"), \"Siv3D Preview\");\n\t\t\t}\n\t\t\tcompilePromiseResolver = null;\n\t\t})\n\t);\n\n\tvscode.tasks.onDidEndTaskProcess(e => {\n\t\tif (e.execution.task.name == \"emcc build\") {\n\t\t\tcompilePromiseResolver && compilePromiseResolver(e.exitCode);\n\t\t}\n\t});\n\n\tconst playgroundExtension = vscode.extensions.getExtension<ExtensionContext>(\"kamenokosoft.wasm-playground\");\n\n\tif (!playgroundExtension.isActive) {\n\t\tawait playgroundExtension.activate();\n\t}\n\n\tconst memFs = playgroundExtension.exports.memFs;\n\n\tawait memFs.restore().catch(e => console.error(e));\n\tmemFs.onDidChangeFile(function () {\n\t\tmemFs.backup();\n\t});\n\n\tconst workspaceRoot = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))\n\t\t? vscode.workspace.workspaceFolders[0] : undefined;\n\n\tif (workspaceRoot) {\n\t\tseedWorkspace(context, workspaceRoot.uri);\n\t}\n}\n\nasync function seedWorkspace(context: vscode.ExtensionContext, workspaceUri: vscode.Uri) {\n\tconst openOptions: vscode.TextDocumentShowOptions = {\n\t\tpreview: false\n\t};\n\n\tconst folders = workspaceUri.path.split(\"/\").slice(1);\n\n\ttry {\t\n\t\tawait vscode.workspace.fs.stat(workspaceUri);\n\t} catch (e) {\n\t\tif (e instanceof vscode.FileSystemError) {\n\t\t\tfor (let i = 1; i <= folders.length; i++) {\n\t\t\t\tconst newDirectory = workspaceUri.with({ path: \"/\" + folders.slice(0, i).join(\"/\") });\n\t\t\t\tawait vscode.workspace.fs.createDirectory(newDirectory);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tif (folders.length > 0 && folders[0] === \"gist\") {\n\t\tawait vscode.window.withProgress({\n\t\t\tlocation: vscode.ProgressLocation.Notification,\n\t\t\ttitle: \"downloading files from GitHub Gist...\"\n\t\t}, async _ => {\n\t\t\tconst gistFsPath = vscode.Uri.parse(`gist://${folders.slice(1).join(\"/\")}/`);\n\t\t\tconst gistExtension = vscode.extensions.getExtension<void>(\"vsls-contrib.gistfs\");\n\n\t\t\tif (!gistExtension.isActive) {\n\t\t\t\tawait gistExtension.activate();\n\t\t\t}\n\n\t\t\tawait vscode.workspace.fs.copy(gistFsPath, workspaceUri, { overwrite: true });\n\n\t\t\tconst cppFiles = await vscode.workspace.findFiles(\"**/*.cpp\");\n\n\t\t\tif (cppFiles.length > 0) {\n\t\t\t\tvscode.commands.executeCommand('vscode.open', cppFiles[0], openOptions);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tawait loadInitialAssets(workspaceUri, context.extensionUri);\n\t\tvscode.commands.executeCommand('vscode.open', vscode.Uri.joinPath(workspaceUri, \"src/Main.cpp\"), openOptions);\n\t\t// vscode.commands.executeCommand(\"emcc.preview.show\", vscode.Uri.joinPath(workspaceUri, \"main.html\"), \"Siv3D Preview\");\n\t}\n\tawait loadAdditionalAssets(workspaceUri, context.extensionUri);\n}\n"],"names":["async","readFileFromTemplate","workspaceRoot","extensionBase","sourcePath","targetPath","targetFilePath","Uri","joinPath","workspace","fs","stat","e","FileSystemError","fileContent","readFile","writeFile","fetchFile","fetchBase","fileResponse","fetch","parse","toString","arrayBuffer","Uint8Array","promises","push","createDirectory","Promise","allSettled","downloadUrl","getConfiguration","get","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","compilePromiseResolver","vscode","window","showErrorMessage","subscriptions","commands","registerCommand","compilePromise","resolve","_","executeCommand","workspaceFolders","length","uri","tasks","onDidEndTaskProcess","execution","task","name","exitCode","playgroundExtension","extensions","getExtension","isActive","activate","memFs","restore","catch","console","error","onDidChangeFile","backup","workspaceUri","openOptions","preview","folders","path","split","slice","i","newDirectory","with","join","withProgress","location","ProgressLocation","Notification","title","gistFsPath","gistExtension","copy","overwrite","cppFiles","findFiles","loadInitialAssets","extensionUri","loadAdditionalAssets","seedWorkspace"],"sourceRoot":""}