{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://siv3d-playground/./src/initialFiles.ts","webpack://siv3d-playground/external commonjs \"vscode\"","webpack://siv3d-playground/webpack/bootstrap","webpack://siv3d-playground/./src/extension.ts"],"sourcesContent":["import {\n\tFileSystemProvider,\n\tUri,\n\tworkspace,\n} from 'vscode';\n\nasync function readFileFromTemplate(workspaceRoot: Uri, extensionBase: Uri, sourcePath: string, targetPath?: string): Promise<void> {\n    const fileContent = await workspace.fs.readFile(Uri.joinPath(extensionBase, \"template\", sourcePath));\n    const targetFilePath = targetPath || sourcePath;\n    await workspace.fs.writeFile(Uri.joinPath(workspaceRoot, targetFilePath), fileContent);\n}\n\nasync function fetchFile(workspaceRoot: Uri, fetchBase: string, sourcePath: string, targetPath?: string): Promise<void> {\n    const fileResponse = await fetch(Uri.joinPath(Uri.parse(fetchBase), sourcePath).toString());\n    const fileContent = await fileResponse.arrayBuffer();\n    const targetFilePath = targetPath || sourcePath;\n    await workspace.fs.writeFile(Uri.joinPath(workspaceRoot, targetFilePath), new Uint8Array(fileContent));\n}\n\nexport async function loadInitialAssets(workspaceRoot: Uri, extensionBase: Uri) {\n    const promises: Promise<void>[] = [];\n\n    //workspace.fs.createDirectory(workspaceRoot);\n    promises.push(readFileFromTemplate(workspaceRoot, extensionBase, \"README.md\"));\n    \n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"src\"));\n    promises.push(readFileFromTemplate(workspaceRoot, extensionBase, \"src/Main.cpp\"));\n\n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"include\"));\n\n    await Promise.all(promises);\n}\n\nexport async function loadAdditionalAssets(workspaceRoot: Uri, extensionBase: Uri) {\n    const promises: Promise<void>[] = [];\n\n    const downloadUrl = workspace.getConfiguration(\"siv3d-playground\").get<string>(\"siv3d-assets-download-url\");\n\n    promises.push(readFileFromTemplate(workspaceRoot, extensionBase, \"main.html\"));\n\n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \".vscode\"));\n    promises.push(readFileFromTemplate(workspaceRoot, extensionBase, \".vscode/tasks.json\"));\n\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"lib/Siv3D.wasm\", \"Siv3D.wasm\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"lib/Siv3D.js\", \"Siv3D.js\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"lib/Siv3D.data\", \"Siv3D.data\"));\n\n    await Promise.all(promises);\n\n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/windmill.png\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/particle.png\"));\n\n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/geojson\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/geojson/countries.geojson\"));\n\n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/texture\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/uv.png\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/grass.jpg\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/rock.jpg\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/ground.jpg\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/texture/earth.jpg\"));\n\n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/shader\"));\n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/shader/essl\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/shader/essl/terrain_forward.vert\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/shader/essl/terrain_forward.frag\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/shader/essl/terrain_normal.frag\"));\n\n    workspace.fs.createDirectory(Uri.joinPath(workspaceRoot, \"example/obj\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/obj/blacksmith.obj\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/obj/mill.obj\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/obj/tree.obj\"));\n    promises.push(fetchFile(workspaceRoot, downloadUrl, \"example/obj/pine.obj\"));\n        \n    await Promise.all(promises);\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//\n// ############################################################################\n//\n//\t\t\t\t\t\t! USED FOR RUNNING VSCODE OUT OF SOURCES FOR WEB !\n//\t\t\t\t\t\t\t\t\t\t! DO NOT REMOVE !\n//\n// ############################################################################\n//\n\nimport * as vscode from 'vscode';\nimport { loadAdditionalAssets, loadInitialAssets } from './initialFiles';\nimport { ExtensionContext } from '../../wasm-playground/src/extension';\n\nexport async function activate(context: vscode.ExtensionContext) {\n\t\n\tif (!vscode.workspace.getConfiguration(\"siv3d-playground\").get<boolean>(\"enable-siv3d-preview\")) {\n\t\tvscode.window.showErrorMessage(\"Siv3D Preview is not available in this browser tab. Please use another browser tab.\");\n\t}\n\n\tlet compilePromiseResolver: ((resultCode: number) => void) | null;\n\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand(\"siv3d-playground.compile.run\", async () => {\n\t\t\tconst compilePromise = new Promise<number>((resolve, _) => {\n\t\t\t\tcompilePromiseResolver = resolve;\n\t\t\t});\n\t\t\tvscode.commands.executeCommand(\"workbench.action.tasks.runTask\", \"emcc build\");\n\n\t\t\tif ((await compilePromise) === 0) {\n\t\t\t\tconst workspaceRoot = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))\n\t\t\t\t\t? vscode.workspace.workspaceFolders[0].uri : undefined;\n\t\t\t\tvscode.commands.executeCommand(\"emcc.preview.show\", vscode.Uri.joinPath(workspaceRoot, \"main.html\"), \"Siv3D Preview\");\n\t\t\t}\n\t\t\tcompilePromiseResolver = null;\n\t\t})\n\t);\n\n\tvscode.tasks.onDidEndTaskProcess(e => {\n\t\tif (e.execution.task.name == \"emcc build\") {\n\t\t\tcompilePromiseResolver && compilePromiseResolver(e.exitCode);\n\t\t}\n\t});\n\n\tconst playgroundExtension = vscode.extensions.getExtension<ExtensionContext>(\"kamenokosoft.wasm-playground\");\n\n\tif (!playgroundExtension.isActive) {\n\t\tawait playgroundExtension.activate();\n\t}\n\n\t// const workSpaceUri = vscode.Uri.parse(\"memfs:/siv3d-playground\");\n\t// seedWorkspace(context, memFs, workSpaceUri);\n\n\tconst workspaceRoot = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))\n\t\t? vscode.workspace.workspaceFolders[0] : undefined;\n\n\tif (workspaceRoot) {\n\t\tseedWorkspace(context, workspaceRoot.uri);\n\t}\n\n\tvscode.workspace.onDidChangeWorkspaceFolders(e => {\n\t\tfor (const workspace of e.added) {\n\t\t\tseedWorkspace(context, workspace.uri);\n\t\t}\n\t});\n}\n\nasync function seedWorkspace(context: vscode.ExtensionContext, workspaceUri: vscode.Uri) {\n\tconst openOptions: vscode.TextDocumentShowOptions = {\n\t\tpreview: false\n\t};\n\n\tconst folders = workspaceUri.path.split(\"/\").slice(1);\n\n\ttry {\t\n\t\tawait vscode.workspace.fs.stat(workspaceUri);\n\t} catch (e) {\n\t\tif (e instanceof vscode.FileSystemError) {\n\t\t\tfor (let i = 1; i <= folders.length; i++) {\n\t\t\t\tconst newDirectory = workspaceUri.with({ path: \"/\" + folders.slice(0, i).join(\"/\") });\n\t\t\t\tawait vscode.workspace.fs.createDirectory(newDirectory);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tif (folders.length > 0 && folders[0] === \"gist\") {\n\t\tawait vscode.window.withProgress({\n\t\t\tlocation: vscode.ProgressLocation.Notification,\n\t\t\ttitle: \"downloading files from GitHub Gist...\"\n\t\t}, async _ => {\n\t\t\tconst gistFsPath = vscode.Uri.parse(`gist://${folders.slice(1).join(\"/\")}/`);\n\t\t\tconst gistExtension = vscode.extensions.getExtension<void>(\"vsls-contrib.gistfs\");\n\n\t\t\tif (!gistExtension.isActive) {\n\t\t\t\tawait gistExtension.activate();\n\t\t\t}\n\n\t\t\tawait vscode.workspace.fs.copy(gistFsPath, workspaceUri, { overwrite: true });\n\n\t\t\tconst cppFiles = await vscode.workspace.findFiles(\"**/*.cpp\");\n\n\t\t\tif (cppFiles.length > 0) {\n\t\t\t\tvscode.commands.executeCommand('vscode.open', cppFiles[0], openOptions);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tawait loadInitialAssets(workspaceUri, context.extensionUri);\n\t\tvscode.commands.executeCommand('vscode.open', vscode.Uri.joinPath(workspaceUri, \"src/Main.cpp\"), openOptions);\n\t\t// vscode.commands.executeCommand(\"emcc.preview.show\", vscode.Uri.joinPath(workspaceUri, \"main.html\"), \"Siv3D Preview\");\n\t}\n\tawait loadAdditionalAssets(workspaceUri, context.extensionUri);\n}\n"],"names":["async","readFileFromTemplate","workspaceRoot","extensionBase","sourcePath","targetPath","fileContent","workspace","fs","readFile","Uri","joinPath","targetFilePath","writeFile","fetchFile","fetchBase","fileResponse","fetch","parse","toString","arrayBuffer","Uint8Array","promises","push","createDirectory","Promise","all","downloadUrl","getConfiguration","get","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","seedWorkspace","context","workspaceUri","openOptions","preview","folders","path","split","slice","vscode","stat","e","FileSystemError","i","length","newDirectory","with","join","window","withProgress","location","ProgressLocation","Notification","title","_","gistFsPath","gistExtension","extensions","getExtension","isActive","activate","copy","overwrite","cppFiles","findFiles","commands","executeCommand","loadInitialAssets","extensionUri","loadAdditionalAssets","compilePromiseResolver","showErrorMessage","subscriptions","registerCommand","compilePromise","resolve","workspaceFolders","uri","tasks","onDidEndTaskProcess","execution","task","name","exitCode","playgroundExtension","onDidChangeWorkspaceFolders","added"],"sourceRoot":""}